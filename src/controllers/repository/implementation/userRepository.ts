import mySqlPool from "../../../config/db";
import { IUser } from "../../dto";
import { IUserRequest } from "../../types";
import { IUserRepository } from "../IuserRepository";



export class UserRepository implements IUserRepository {

  /**
 * Checks if a username is already taken in the database
 */
async isUsernameTaken(username: string): Promise<boolean> {
  const [rows]: [any[], any] = await mySqlPool.query(
    'SELECT id FROM users WHERE username = ? LIMIT 1',
    [username]
  );
  return rows.length > 0;
}



  async generateUsername(first_name: string, last_name: string): Promise<string> {
    // Extract all initials from first_name
    const initials = first_name
      .trim()
      .split(/\s+/) // Split by spaces to handle multiple names
      .map(word => word.charAt(0).toLowerCase()) // Get first character of each word
      .join(''); // Join initials together
  
    // Construct the base username
    let baseUsername = `${initials}${last_name.toLowerCase()}`;
    let username = baseUsername;
    let counter = 1;
  
    // Check if the username already exists and increment
    while (await this.isUsernameTaken(username)) {
      username = `${baseUsername}${counter}`;
      counter++;
    }
  
    return username;
  }



  async create(user: IUserRequest): Promise<IUser> {
    // Step 1: Generate the username based on first_name and last_name
    const username = await this.generateUsername(user.first_name, user.last_name);
  
    // Step 2: Insert the new user record into the database with the autogenerated username
    const [result]: any = await mySqlPool.query(
      'INSERT INTO users (first_name, middle_name, last_name, name_extension, email, password, username) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [
        user.first_name,
        user.middle_name,
        user.last_name,
        user.name_extension,
        user.email,
        user.password,
        username // Use the generated username here
      ]
    );
  
    // Step 3: Return the created user object
    const createdUser: IUser = {
      id: result.insertId.toString(),
      ...user,
      username // Include the generated username in the response
    };
  
    return createdUser;
  }
  async getUsers(): Promise<IUser[]> {
    const [rows]: [any[], any] = await mySqlPool.query('SELECT * FROM users');
    return rows.map(row => ({
      id: row.id.toString(),
      first_name: row.first_name,
      middle_name : row.middle_name,
      last_name : row.last_name,
      name_extension : row.name_extension,
      password : row.password,
      email : row.email,
      username : row.username
    }));
  }

  async getUserById(userId: string): Promise<IUser | undefined> {
    const [rows]: [any[], any] = await mySqlPool.query(
      'SELECT * FROM users WHERE id = ?',
      [userId]
    );

    if (rows.length === 0) {
      return undefined;
    }

    const user = rows[0];
    return {
      id: user.id.toString(),
      first_name : user.first_name,
      middle_name : user.middle_name,
      last_name : user.last_name,
      name_extension : user.name_extension,
      password : user.password,
      email : user.email,
      username : user.email
    };
  }

  async updateUser(id: string, user: IUserRequest): Promise<IUser> {
    await mySqlPool.query(
      'UPDATE users SET first_name = ?, middle_name = ?, last_name = ?, name_extension = ?, email = ?, password = ?, username = ? WHERE id = ?',
      [user.first_name, user.middle_name, user.last_name, user.name_extension, user.password, user.email, user.username, id]
    );

    return {
      id,
      ...user,
    };
  }

  async delete(id: string): Promise<IUser> {
    const user = await this.getUserById(id);
    if (!user) {
      throw new Error('User not found');
    }

    await mySqlPool.query('DELETE FROM users WHERE id = ?', [id]);
    return user;
  }
}
